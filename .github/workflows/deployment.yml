name: CICD

on:
  pull_request:
      types: [opened, synchronize]
      branches: [development] 
      paths:
         - 'force-app/**'

jobs:
    validate-deployment-on-develop-org:
        runs-on: ubuntu-latest
        steps:
            # Now we install nodejs in the VM, and specify version 14
            - uses: actions/setup-node@v3
              with:
                node-version: '16'
            # - name: Validate branch name requirements
            #   uses: deepakputhraya/action-branch-name@master
            #   with:
            #       regex: '([a-z])+\/([a-z])+'
            #       min_length: 3
            # Update sfdx-project.json and README to use only latest package version
            # - name: 'Update sfdx-project.json and README'
            #   id: packaging-updater
            #   uses: muenzpraeger/github-action-sfdx-packaging-updater@master

            # Re-add changes back to source
            # - name: 'Add new package version, updated sfdx-project.json and README to source'
            #   if: steps.packaging-updater.outputs.isSuccess
            #   uses: Automattic/action-commit-to-branch@master
            #   with:
            #       branch: ${{ github.head_ref }}
            #       commit_message: 'Added new package version ID'
            #   env:
            #       GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} 
            # Install Salesforce CLI
            #  wget https://developer.salesforce.com/media/salesforce-cli/sfdx-linux-amd64.tar.xz
            #       mkdir sfdx-cli
            #       tar xJf sfdx-linux-amd64.tar.xz -C sfdx-cli --strip-components 1
            #       ./sfdx-cli/install
            - name: Install Salesforce CLI
              run: npm install sfdx-cli --global
                  
            # install SFDX-Git-Delta plugin - https://github.com/scolladon/sfdx-git-delta
            - name: 'Installing sfdx git delta'
              run:  npm install sfdx-git-delta@latest -g
            
            # Install java as it is required for the next step
            - name: 'Installing java'
              run: |
                  sudo apt-get update \ 
                  sudo apt-get install openjdk-8-jdk
            
            # # Install SFDX scanner
            # - name: 'Installing SFDX scanner'
            #  run: |
            #       sfdx plugins:install @salesforce/sfdx-scanner
            
            #checkout source code
            - name: 'Checkout source code'
              uses: actions/checkout@v3
              with:
                fetch-depth: 2

            # The URL is stored in the Github Secret named SECURITY_TOKEN
            # so here we store the URL into a text file
            # sfdx does not accept bash variable that's why we store it in a file
            - name: 'Populate auth file with SFDX_URL secret of integration org'
              shell: bash
              run: |
                  echo ${{ secrets.SECURITY_TOKEN }} > ./SFDX_INTEGRATION_URL.txt

            # Authenticate to org
            - name: 'Authenticate to Integration Org'
              run: sfdx auth:sfdxurl:store -f ./SFDX_INTEGRATION_URL.txt -s -a integration

            # We use SFDX Git Delta to create a directory with only the metadata that has changed.
            # this allows us to deploy only those changes, as opposed to deploying the entire branch. 
            # This helps reducing deployment times
            - name: 'Generate package.xml'
              run: | 
                  mkdir changed-sources
                  sfdx sgd:source:delta --to "HEAD" --from "HEAD^" --output changed-sources/ --generate-delta --source force-app/ 

            # Now we can use the sfdx scanner to scan the code in the delta directory
            # The output of the scan is stored in a file called apexScanResults.sarif

            # The .sarif file can later be uploaded to github, so that we can see the 
            # results of the scan directly from the PR.

            # - name: 'Scan code'
            #   run: |
            #       cd changed-sources
            #       sfdx scanner:run --format sarif --target './**/*.cls' --category "Design,Best Practices,Performance" --outfile 'apexScanResults.sarif'  
            #       cd ..
  
            # # Now we upload the .sarif file as explained in the previous step
            # - name: Upload SARIF file
            #   uses: github/codeql-action/upload-sarif@v2
            #   with:
            #     sarif_file: changed-sources/apexScanResults.sarif

            
                  

           
